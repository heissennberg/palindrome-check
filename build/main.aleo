program palindrome_check.aleo;





function main:
    input r0 as u32.public;
    is.eq r0 0u32 into r1;
    pow 10u32 0u32 into r2;
    div r0 r2 into r3;
    rem r3 10u32 into r4;
    is.neq r4 0u32 into r5;
    add 0u32 1u32 into r6;
    ternary r5 r6 0u32 into r7;
    pow 10u32 1u32 into r8;
    div r0 r8 into r9;
    rem r9 10u32 into r10;
    is.neq r10 0u32 into r11;
    add 1u32 1u32 into r12;
    ternary r11 r12 r7 into r13;
    pow 10u32 2u32 into r14;
    div r0 r14 into r15;
    rem r15 10u32 into r16;
    is.neq r16 0u32 into r17;
    add 2u32 1u32 into r18;
    ternary r17 r18 r13 into r19;
    pow 10u32 3u32 into r20;
    div r0 r20 into r21;
    rem r21 10u32 into r22;
    is.neq r22 0u32 into r23;
    add 3u32 1u32 into r24;
    ternary r23 r24 r19 into r25;
    pow 10u32 4u32 into r26;
    div r0 r26 into r27;
    rem r27 10u32 into r28;
    is.neq r28 0u32 into r29;
    add 4u32 1u32 into r30;
    ternary r29 r30 r25 into r31;
    pow 10u32 5u32 into r32;
    div r0 r32 into r33;
    rem r33 10u32 into r34;
    is.neq r34 0u32 into r35;
    add 5u32 1u32 into r36;
    ternary r35 r36 r31 into r37;
    pow 10u32 6u32 into r38;
    div r0 r38 into r39;
    rem r39 10u32 into r40;
    is.neq r40 0u32 into r41;
    add 6u32 1u32 into r42;
    ternary r41 r42 r37 into r43;
    pow 10u32 7u32 into r44;
    div r0 r44 into r45;
    rem r45 10u32 into r46;
    is.neq r46 0u32 into r47;
    add 7u32 1u32 into r48;
    ternary r47 r48 r43 into r49;
    pow 10u32 8u32 into r50;
    div r0 r50 into r51;
    rem r51 10u32 into r52;
    is.neq r52 0u32 into r53;
    add 8u32 1u32 into r54;
    ternary r53 r54 r49 into r55;
    pow 10u32 9u32 into r56;
    div r0 r56 into r57;
    rem r57 10u32 into r58;
    is.neq r58 0u32 into r59;
    add 9u32 1u32 into r60;
    ternary r59 r60 r55 into r61;
    ternary r1 1u32 r61 into r62;
    div r62 2u32 into r63;
    add r63 1u32 into r64;
    lt 0u32 r64 into r65;
    and r65 true into r66;
    sub r62 0u32 into r67;
    sub r67 1u32 into r68;
    pow 10u32 r68 into r69;
    div r0 r69 into r70;
    rem r70 10u32 into r71;
    add 0u32 1u32 into r72;
    pow 10u32 r72 into r73;
    rem r0 r73 into r74;
    pow 10u32 0u32 into r75;
    div r74 r75 into r76;
    is.neq r71 r76 into r77;
    ternary r77 false true into r78;
    ternary r66 r78 true into r79;
    div r62 2u32 into r80;
    add r80 1u32 into r81;
    lt 1u32 r81 into r82;
    and r82 r79 into r83;
    sub r62 1u32 into r84;
    sub r84 1u32 into r85;
    pow 10u32 r85 into r86;
    div r0 r86 into r87;
    rem r87 10u32 into r88;
    add 1u32 1u32 into r89;
    pow 10u32 r89 into r90;
    rem r0 r90 into r91;
    pow 10u32 1u32 into r92;
    div r91 r92 into r93;
    is.neq r88 r93 into r94;
    ternary r94 false r79 into r95;
    ternary r83 r95 r79 into r96;
    div r62 2u32 into r97;
    add r97 1u32 into r98;
    lt 2u32 r98 into r99;
    and r99 r96 into r100;
    sub r62 2u32 into r101;
    sub r101 1u32 into r102;
    pow 10u32 r102 into r103;
    div r0 r103 into r104;
    rem r104 10u32 into r105;
    add 2u32 1u32 into r106;
    pow 10u32 r106 into r107;
    rem r0 r107 into r108;
    pow 10u32 2u32 into r109;
    div r108 r109 into r110;
    is.neq r105 r110 into r111;
    ternary r111 false r96 into r112;
    ternary r100 r112 r96 into r113;
    div r62 2u32 into r114;
    add r114 1u32 into r115;
    lt 3u32 r115 into r116;
    and r116 r113 into r117;
    sub r62 3u32 into r118;
    sub r118 1u32 into r119;
    pow 10u32 r119 into r120;
    div r0 r120 into r121;
    rem r121 10u32 into r122;
    add 3u32 1u32 into r123;
    pow 10u32 r123 into r124;
    rem r0 r124 into r125;
    pow 10u32 3u32 into r126;
    div r125 r126 into r127;
    is.neq r122 r127 into r128;
    ternary r128 false r113 into r129;
    ternary r117 r129 r113 into r130;
    div r62 2u32 into r131;
    add r131 1u32 into r132;
    lt 4u32 r132 into r133;
    and r133 r130 into r134;
    sub r62 4u32 into r135;
    sub r135 1u32 into r136;
    pow 10u32 r136 into r137;
    div r0 r137 into r138;
    rem r138 10u32 into r139;
    add 4u32 1u32 into r140;
    pow 10u32 r140 into r141;
    rem r0 r141 into r142;
    pow 10u32 4u32 into r143;
    div r142 r143 into r144;
    is.neq r139 r144 into r145;
    ternary r145 false r130 into r146;
    ternary r134 r146 r130 into r147;
    div r62 2u32 into r148;
    add r148 1u32 into r149;
    lt 5u32 r149 into r150;
    and r150 r147 into r151;
    sub r62 5u32 into r152;
    sub r152 1u32 into r153;
    pow 10u32 r153 into r154;
    div r0 r154 into r155;
    rem r155 10u32 into r156;
    add 5u32 1u32 into r157;
    pow 10u32 r157 into r158;
    rem r0 r158 into r159;
    pow 10u32 5u32 into r160;
    div r159 r160 into r161;
    is.neq r156 r161 into r162;
    ternary r162 false r147 into r163;
    ternary r151 r163 r147 into r164;
    div r62 2u32 into r165;
    add r165 1u32 into r166;
    lt 6u32 r166 into r167;
    and r167 r164 into r168;
    sub r62 6u32 into r169;
    sub r169 1u32 into r170;
    pow 10u32 r170 into r171;
    div r0 r171 into r172;
    rem r172 10u32 into r173;
    add 6u32 1u32 into r174;
    pow 10u32 r174 into r175;
    rem r0 r175 into r176;
    pow 10u32 6u32 into r177;
    div r176 r177 into r178;
    is.neq r173 r178 into r179;
    ternary r179 false r164 into r180;
    ternary r168 r180 r164 into r181;
    div r62 2u32 into r182;
    add r182 1u32 into r183;
    lt 7u32 r183 into r184;
    and r184 r181 into r185;
    sub r62 7u32 into r186;
    sub r186 1u32 into r187;
    pow 10u32 r187 into r188;
    div r0 r188 into r189;
    rem r189 10u32 into r190;
    add 7u32 1u32 into r191;
    pow 10u32 r191 into r192;
    rem r0 r192 into r193;
    pow 10u32 7u32 into r194;
    div r193 r194 into r195;
    is.neq r190 r195 into r196;
    ternary r196 false r181 into r197;
    ternary r185 r197 r181 into r198;
    div r62 2u32 into r199;
    add r199 1u32 into r200;
    lt 8u32 r200 into r201;
    and r201 r198 into r202;
    sub r62 8u32 into r203;
    sub r203 1u32 into r204;
    pow 10u32 r204 into r205;
    div r0 r205 into r206;
    rem r206 10u32 into r207;
    add 8u32 1u32 into r208;
    pow 10u32 r208 into r209;
    rem r0 r209 into r210;
    pow 10u32 8u32 into r211;
    div r210 r211 into r212;
    is.neq r207 r212 into r213;
    ternary r213 false r198 into r214;
    ternary r202 r214 r198 into r215;
    output r215 as boolean.private;
